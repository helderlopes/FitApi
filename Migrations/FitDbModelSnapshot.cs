// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FitApi.Migrations
{
    [DbContext(typeof(FitDb))]
    partial class FitDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AthleteId")
                        .HasColumnType("integer");

                    b.Property<double?>("AverageHeartRate")
                        .HasColumnType("double precision");

                    b.Property<double?>("AveragePower")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("ElapsedTime")
                        .HasColumnType("interval");

                    b.Property<int?>("EquipmentId")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxHeartRate")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxPower")
                        .HasColumnType("integer");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("MovingTime")
                        .HasColumnType("interval");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SportType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalElevationGain")
                        .HasColumnType("integer");

                    b.Property<int?>("WorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Athlete", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Athletes");
                });

            modelBuilder.Entity("Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AthleteId")
                        .HasColumnType("integer");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AthleteId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SportType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AthleteId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("WorkoutStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetMaxHeartRate")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetMaxPower")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetMinHeartRate")
                        .HasColumnType("integer");

                    b.Property<int?>("TargetMinPower")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutSteps");
                });

            modelBuilder.Entity("Activity", b =>
                {
                    b.HasOne("Athlete", "Athlete")
                        .WithMany("Activities")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Equipment", "Equipment")
                        .WithMany("Activities")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("Workout", "Workout")
                        .WithMany("Activities")
                        .HasForeignKey("WorkoutId");

                    b.Navigation("Athlete");

                    b.Navigation("Equipment");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Equipment", b =>
                {
                    b.HasOne("Athlete", "Athlete")
                        .WithMany("Equipments")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("Workout", b =>
                {
                    b.HasOne("Athlete", "Athlete")
                        .WithMany("Workouts")
                        .HasForeignKey("AthleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Athlete");
                });

            modelBuilder.Entity("WorkoutStep", b =>
                {
                    b.HasOne("Workout", "Workout")
                        .WithMany("WorkoutSteps")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Athlete", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Equipments");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("Equipment", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Workout", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("WorkoutSteps");
                });
#pragma warning restore 612, 618
        }
    }
}
